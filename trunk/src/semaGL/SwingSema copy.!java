package semaGL;

import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.ActionEvent;
import java.awt.Event;
import java.awt.FlowLayout;

import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLDrawableFactory;
import javax.media.opengl.GLException;
import javax.media.opengl.GLPbuffer;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.KeyStroke;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.*;

import java.awt.Dimension;
import java.awt.GridBagLayout;
import javax.swing.JSplitPane;
import java.awt.GridBagConstraints;
import javax.swing.JCheckBox;
import java.awt.Insets;
import nehe.GLDisplayPanel;
import javax.swing.JTextField;
import javax.swing.JSlider;
import java.awt.Font;
import java.util.HashMap;
import java.util.TreeSet;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import UI.SimButton;
import java.awt.BorderLayout;
import java.io.File;


/**
 * This code was edited or generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
 * use. If Jigloo is being used commercially (ie, by a corporation,
 * company or business for any purpose whatever) then you
 * should purchase a license for each developer using Jigloo.
 * Please visit www.cloudgarden.com for details.
 * Use of Jigloo implies acceptance of these licensing terms.
 * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED FOR
 * THIS MACHINE, SO JIGLOO OR THIS CODE CANNOT BE USED
 * LEGALLY FOR ANY CORPORATE OR COMMERCIAL PURPOSE.
 */
public class SwingSema {

	{
		//Set Look & Feel
		try {
			javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
			//			MetalLookAndFeel.setCurrentTheme(new SemaTheme());

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Launches this application
	 */
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			private SwingSema application;
			private SemaSpace space;

			public void run() {
				GLDisplayPanel semaGLDisplay = GLDisplayPanel.createGLDisplay("SemaSpace");

				space = new SemaSpace();
				semaGLDisplay.addGLEventListener(space);
				application = new SwingSema();
				application.setSema(space);
				application.getMainWindow().setVisible(true);
				application.jSplitPane.setRightComponent(semaGLDisplay.getJPanel());

				//				semaGLDisplay.addFocusListener(new FocusAdapter() {
				//					public void focusLost(FocusEvent evt) {
				//						//						application.redrawUI();
				//						space.setCalc(false);
				//
				//					}
				//					public void focusGained(FocusEvent evt) {
				//						//						application.redrawUI();
				//						space.setCalc(true);
				//					}
				//				});
				semaGLDisplay.start();
			}
		});
	}

	public void screenshot (int h, int w, String filename) {
		GLAutoDrawable gld = app.glD;
		if (!GLDrawableFactory.getFactory().canCreateGLPbuffer()) return;

	}

	SemaSpace app = null;  //  @jve:decl-index=0:
	private JMenuBar jJMenuBar = null;
	private JList edgeAttList;
	private JScrollPane edgeAttPane;
	private JSplitPane AttributeSplitPane1;
	private JList nodeAttList;
	private JScrollPane nodeAttPane;
	private JFileChooser openPicDir = null;
	private JFileChooser openFile = null;
	private JFileChooser saveFile = null;
	private DefaultListModel nodeListModel;
	private JTable edgeJTable;
	private JScrollPane eListScrollPane;
	private DefaultTableModel eTableModel;
	protected String friendID;
	private JSplitPane edgeWndSplitPane = null;
	private JPanel edgeListPanel = null;
	private JTextField columnAField = null;
	private JTextField columnBField = null;
	private SimButton selectAButton = null;
	private SimButton selectBButton = null;
	private SimButton addEdgeButton = null;
	private JFrame diffusionFrame = null;  //  @jve:decl-index=0:visual-constraint="785,664"
	private JMenuItem exitMenuItem;
	private JMenuItem saveMenuItem;
	private JMenuItem openNodeMenuItem;
	private JMenuItem openMenuItem;
	private JMenuItem openPicMenuItem;
	private JMenu fileMenu;
	private JLabel jLabel6;
	private JPanel dummyPanel;
	private JLabel jLabel5;
	private JLabel jLabel4;
	private JLabel jLabel3;
	private JCheckBox repellBox1;
	private JCheckBox repNeighbors;
	private JCheckBox treeBox;
	private JCheckBox timeBox;
	private JCheckBox clusters;
	private JLabel forces;
	private JLabel strengthLabel;
	private JLabel pushLabel11;
	private JLabel pushLabel1;
	private JLabel pushLabel;
	private JLabel group;
	private JLabel distLabel;
	private JLabel valenzLabel;
	private JSlider strengthSlider;
	private JSlider stretchSlider;
	private JSlider repellStSlider;
	private JSlider pushSlider;
	private JSlider groupRadius;
	private JSlider distanceSlider;
	private JSlider valenzSlider;
	private JPanel layoutTab;
	private JLabel sizeLabel;
	private JSlider sizeSlider;
	private JLabel display;
	private SimButton inflateButton;
	private SimButton shuffleButton;
	private JCheckBox draw3d;
	private JCheckBox noRender;
	private JCheckBox drawedges;
	private SimButton texButton1;
	private JPanel viewTab;
	private JLabel jLabel2;
	private JCheckBox directedGraph;
	private SimButton SimButton2;
	private SimButton expandnet;
	private SimButton expand2;
	private SimButton showAll;
	private SimButton randomCenter;
	private SimButton interrupt;
	private SimButton elimButton1;
	private JLabel search;
	private SimButton seachSelButton;
	private JLabel depthLabel;
	private JSlider depth;
	private SimButton searchButton;
	private JCheckBox drawclusters;
	private JLabel jLabel12;
	private JScrollPane nets;
	private SimButton clear;
	private SimButton saveNet;
	private SimButton imgDir;
	private SimButton loadNodeAtt;
	private JButton loadNet;
	private JPanel file;
	private SimButton simButton10;
	private JCheckBox jCheckBox1;
	private SimButton simButton9;
	private JCheckBox renderTextures;
	private SimButton simButton8;
	private SimButton simButton7;
	private SimButton simButton6;
	private SimButton boxButton;
	private JCheckBox add;
	private JLabel jLabel11;
	private SimButton simButton5;
	private SimButton simButton4;
	private JTextField searchTerm;
	private JPanel dataTab;
	private JScrollPane nodes;
	private JTabbedPane inspectors;
	private JSplitPane jSplitPane1;
	private JTabbedPane controlPanel;
	private JSplitPane jSplitPane;
	private JList nodeList;
	private JTextArea jTextFieldMsg;
	private JFrame statusMessage;
	private JPanel diffusionPane = null;
	private JPanel jPanel11 = null;
	private JSlider spawnSlider = null;
	private JSlider multiplicitySlider = null;
	private JSlider numStepsSlider = null;
	private SimButton setStartButton = null;
	private SimButton propagateButton = null;
	private JLabel ageLabel2 = null;
	private JLabel ageLabel21 = null;
	private JLabel numSteps = null;
	private SimButton swapButton = null;
	private SimButton resetButton = null;
	private JLabel ageSlider2 = null;
	private JSlider age2Slider = null;
	private JSlider feedbackSlider = null;
	private JLabel feedback = null;
	JCheckBox visitedBox = null;

	private JFrame mainWindow;
	private DefaultListModel nodeAttModel;
	private DefaultListModel edgeAttModel;
	private JCheckBox forceBox;
	private JLabel jLabel1;
	private JSlider fontslider;
	private JCheckBox fadenodes;
	private JPanel midPanels;
	private JSplitPane jSplitPane2;
	private JLabel jLabel10;
	private JSlider jSlider2;
	private JLabel jLabel9;
	private JSlider picSizeSlider;
	private JLabel jLabel8;
	private SimButton simButton3;
	private SimButton simButton2;
	private SimButton simButton1;
	private JLabel jLabel7;
	private JSlider jSlider1;
	private JList netList;
	private DefaultListModel netListModel;
	protected boolean change=true;
	/**
	 * This method initializes SimButton3	
	 * 	
	 * @return javax.swing.SimButton	
	 */
	private SimButton getAddEdgeButton() {
		if (addEdgeButton == null) {
			addEdgeButton = new SimButton();
			addEdgeButton.setText("add Edge");
			addEdgeButton.setFont(new Font("Dialog", Font.PLAIN, 10));
			addEdgeButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.addEdge(columnAField.getText(), columnBField.getText());
				}
			});
		}
		return addEdgeButton;
	}
	/**
	 * This method initializes age2Slider	
	 * 	
	 * @return javax.swing.JSlider	
	 */
	private JSlider getAge2Slider() {
		if (age2Slider == null) {
			age2Slider = new JSlider();
			age2Slider.setPaintTrack(false);
			age2Slider.setMinimum(1);
			age2Slider.setMaximum(100);
			age2Slider.setMajorTickSpacing(10);
			age2Slider.setMinorTickSpacing(5);
			age2Slider.setPaintTicks(true);
			age2Slider.setInverted(true);
			age2Slider.setMinimum(1);
			age2Slider.setValue((int)app.getAgeThresh());
			age2Slider.addChangeListener(new javax.swing.event.ChangeListener() {
				public void stateChanged(javax.swing.event.ChangeEvent e) {
					app.setAgeThresh(age2Slider.getValue());
				}
			});
		}
		return age2Slider;
	}

	/**
	 * This method initializes columnAField	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getColumnAField() {
		if (columnAField == null) {
			columnAField = new JTextField();
		}
		return columnAField;
	}

	/**
	 * This method initializes columnBField	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getColumnBField() {
		if (columnBField == null) {
			columnBField = new JTextField();
		}
		return columnBField;
	}

	/**
	 * This method initializes diffusionFrame	
	 * 	
	 * @return javax.swing.JFrame	
	 */
	private JFrame getDiffusionFrame() {
		if (diffusionFrame == null) {
			diffusionFrame = new JFrame();
			diffusionFrame.setAlwaysOnTop(true);
			diffusionFrame.setSize(new Dimension(288, 223));
			diffusionFrame.setTitle("diffusion simulation");
			diffusionFrame.setContentPane(getDiffusionPane());
		}
		return diffusionFrame;
	}

	/**
	 * This method initializes diffusionPane	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getDiffusionPane() {
		if (diffusionPane == null) {
			diffusionPane = new JPanel();
			diffusionPane.setLayout(new BorderLayout());
			diffusionPane.add(getJPanel11(), BorderLayout.CENTER);
		}
		return diffusionPane;
	}



	/**
	 * This method initializes edgeListPanel	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getEdgeListPanel() {
		if (edgeListPanel == null) {
			GridBagConstraints gridBagConstraints52 = new GridBagConstraints();
			gridBagConstraints52.gridx = 1;
			gridBagConstraints52.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints52.gridy = 2;
			GridBagConstraints gridBagConstraints50 = new GridBagConstraints();
			gridBagConstraints50.gridx = 1;
			gridBagConstraints50.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints50.gridy = 0;
			GridBagConstraints gridBagConstraints49 = new GridBagConstraints();
			gridBagConstraints49.gridx = 0;
			gridBagConstraints49.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints49.gridy = 0;
			GridBagConstraints gridBagConstraints48 = new GridBagConstraints();
			gridBagConstraints48.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints48.gridy = 1;
			gridBagConstraints48.weightx = 1.0;
			gridBagConstraints48.gridx = 1;
			GridBagConstraints gridBagConstraints47 = new GridBagConstraints();
			gridBagConstraints47.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints47.gridy = 1;
			gridBagConstraints47.weightx = 1.0;
			gridBagConstraints47.gridx = 0;
			edgeListPanel = new JPanel();
			edgeListPanel.setLayout(new GridBagLayout());
			edgeListPanel.setPreferredSize(new Dimension(166, 80));
			//			edgeListPanel.setBackground(new java.awt.Color(192,192,192));
			edgeListPanel.add(getColumnAField(), gridBagConstraints47);
			edgeListPanel.add(getColumnBField(), gridBagConstraints48);
			edgeListPanel.add(getSelectAButton(), gridBagConstraints49);
			edgeListPanel.add(getSelectBButton(), gridBagConstraints50);
			edgeListPanel.add(getAddEdgeButton(), gridBagConstraints52);
		}
		return edgeListPanel;
	}

	/**
	 * This method initializes edgeWndSplitPane	
	 * 	
	 * @return javax.swing.JSplitPane	
	 */
	private JSplitPane getEdgeWndSplitPane() {
		if (edgeWndSplitPane == null) {
			edgeWndSplitPane = new JSplitPane();
			edgeWndSplitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
			edgeWndSplitPane.setDividerLocation(75);
			edgeWndSplitPane.setDividerSize(0);
			//			edgeWndSplitPane.setBackground(new java.awt.Color(192,192,192));
			edgeWndSplitPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
			edgeWndSplitPane.setTopComponent(getEdgeListPanel());
			eTableModel = new DefaultTableModel();
			newETable();
			edgeJTable = new JTable(eTableModel);
			edgeJTable.setAutoCreateColumnsFromModel(false);
			edgeJTable.setName("edges");
			edgeJTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			edgeJTable.setRowSelectionAllowed(false);
			edgeJTable.setFocusable(false);
			eListScrollPane = new JScrollPane(edgeJTable);
			edgeWndSplitPane.setBottomComponent(eListScrollPane);
			//			eListScrollPane.setBackground(new java.awt.Color(192,192,192));
			eListScrollPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
			eListScrollPane.setName("edges");
		}
		return edgeWndSplitPane;
	}

	/**
	 * This method initializes feedbackSlider	
	 * 	
	 * @return javax.swing.JSlider	
	 */
	private JSlider getFeedbackSlider() {
		if (feedbackSlider == null) {
			feedbackSlider = new JSlider();
			feedbackSlider.setName("growth factor");
			feedbackSlider.setMajorTickSpacing(50);
			feedbackSlider.setMaximum(100);
			feedbackSlider.setMinimum(0);
			feedbackSlider.setMinorTickSpacing(10);
			feedbackSlider.setValue(app.diffusor.getFeedback());
			feedbackSlider.setPaintLabels(false);
			feedbackSlider.setPaintTicks(true);
			feedbackSlider.setPaintTrack(false);
			feedbackSlider.setToolTipText("set probability to add new nodes");
			feedbackSlider.addChangeListener(new javax.swing.event.ChangeListener() {
				public void stateChanged(javax.swing.event.ChangeEvent e) {
					app.diffusor.setFeedback(feedbackSlider.getValue());
				}
			});
		}
		return feedbackSlider;
	}

	/**
	 * This method initializes mainWindow
	 * 
	 * @return javax.swing.JFrame
	 */

	public JFrame getMainWindow() {
		if (mainWindow == null) {
			mainWindow = new JFrame();
			mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			//			mainWindow.setJMenuBar(getJJMenuBar());
			mainWindow.setSize(1000,600);
			mainWindow.setTitle("SemaSpace");
			mainWindow.setContentPane(getJSplitPane());
			openFile = new JFileChooser();
			openPicDir = new JFileChooser();
			openPicDir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			saveFile = new JFileChooser();
		}
		return mainWindow;
	}



	private JFrame getStatusMessage() {
		if(statusMessage == null) {
			statusMessage = new JFrame();
			statusMessage.getContentPane().setLayout(new BorderLayout());
			statusMessage.setTitle("RenderStatus");
			statusMessage.getContentPane().add(getJTextFieldMsg(), BorderLayout.CENTER);
			statusMessage.setBounds(400, 650, 400, 200);
			//			statusMessage.setAlwaysOnTop(true);
			statusMessage.setSize(400, 200);
			getJTextFieldMsg().setSize(statusMessage.getSize());
		}
		return statusMessage;
	}

	/**
	 * This method initializes jJMenuBar	
	 * 	
	 * @return javax.swing.JMenuBar	
	 */
	JMenuBar getJJMenuBar() {
		if (jJMenuBar == null) {
			jJMenuBar = new JMenuBar();
			jJMenuBar.addFocusListener(new FocusAdapter() {
				public void focusGained(FocusEvent evt) {
					jJMenuBar.paintAll(jJMenuBar.getGraphics());
				}
			});
			jJMenuBar.add(getFileMenu());
		}
		return jJMenuBar;
	}

	/**
	 * This method initializes jPanel11	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getJPanel11() {
		if (jPanel11 == null) {				
			GridBagConstraints gridBagConstraints74 = new GridBagConstraints();
			gridBagConstraints74.gridx = 1;
			gridBagConstraints74.anchor = GridBagConstraints.WEST;
			gridBagConstraints74.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints74.gridy = 6;
			GridBagConstraints gridBagConstraints76 = new GridBagConstraints();
			gridBagConstraints76.gridx = 2;
			gridBagConstraints76.gridy = 1;
			feedback = new JLabel();
			feedback.setFont(new Font("Dialog", Font.PLAIN, 12));
			feedback.setText("feedback");
			GridBagConstraints gridBagConstraints75 = new GridBagConstraints();
			gridBagConstraints75.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints75.gridy = 1;
			gridBagConstraints75.weightx = 1.0;
			gridBagConstraints75.gridwidth = 2;
			gridBagConstraints75.gridx = 0;
			GridBagConstraints gridBagConstraints73 = new GridBagConstraints();
			gridBagConstraints73.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints73.gridy = 4;
			gridBagConstraints73.weightx = 1.0;
			gridBagConstraints73.gridwidth = 2;
			gridBagConstraints73.gridx = 0;
			GridBagConstraints gridBagConstraints72 = new GridBagConstraints();
			gridBagConstraints72.gridx = 2;
			gridBagConstraints72.gridy = 4;
			ageSlider2 = new JLabel();
			ageSlider2.setFont(new Font("Dialog", Font.PLAIN, 12));
			ageSlider2.setText("age display");
			GridBagConstraints gridBagConstraints71 = new GridBagConstraints();
			gridBagConstraints71.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints71.gridy = 3;
			gridBagConstraints71.weightx = 1.0;
			gridBagConstraints71.gridwidth = 2;
			gridBagConstraints71.gridx = 0;
			GridBagConstraints gridBagConstraints70 = new GridBagConstraints();
			gridBagConstraints70.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints70.gridy = 3;
			gridBagConstraints70.weightx = 1.0;
			gridBagConstraints70.gridwidth = 2;
			gridBagConstraints70.gridx = 0;
			GridBagConstraints gridBagConstraints27 = new GridBagConstraints();
			gridBagConstraints27.gridx = 0;					gridBagConstraints27.gridy = 6;
			GridBagConstraints gridBagConstraints69 = new GridBagConstraints();
			gridBagConstraints69.gridx = 2;
			gridBagConstraints69.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints69.gridy = 5;
			GridBagConstraints gridBagConstraints68 = new GridBagConstraints();
			gridBagConstraints68.gridx = 2;
			gridBagConstraints68.gridy = 3;
			numSteps = new JLabel();
			numSteps.setFont(new Font("Dialog", Font.PLAIN, 12));
			numSteps.setText("num steps");
			GridBagConstraints gridBagConstraints67 = new GridBagConstraints();
			gridBagConstraints67.gridx = 2;
			gridBagConstraints67.gridy = 2;
			ageLabel21 = new JLabel();
			ageLabel21.setFont(new Font("Dialog", Font.PLAIN, 12));
			ageLabel21.setText("multiplicity");
			GridBagConstraints gridBagConstraints66 = new GridBagConstraints();
			gridBagConstraints66.gridx = 2;
			gridBagConstraints66.gridy = 0;
			ageLabel2 = new JLabel();
			ageLabel2.setFont(new Font("Dialog", Font.PLAIN, 12));
			ageLabel2.setText("growth");
			GridBagConstraints gridBagConstraints65 = new GridBagConstraints();
			gridBagConstraints65.gridx = 1;
			gridBagConstraints65.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints65.gridy = 5;
			GridBagConstraints gridBagConstraints64 = new GridBagConstraints();
			gridBagConstraints64.gridx = 0;
			gridBagConstraints64.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints64.gridy = 5;
			GridBagConstraints gridBagConstraints63 = new GridBagConstraints();
			gridBagConstraints63.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints63.gridy = 3;
			gridBagConstraints63.weightx = 1.0;
			gridBagConstraints63.gridwidth = 2;
			gridBagConstraints63.gridx = 0;
			GridBagConstraints gridBagConstraints62 = new GridBagConstraints();
			gridBagConstraints62.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints62.gridy = 2;
			gridBagConstraints62.weightx = 1.0;
			gridBagConstraints62.gridwidth = 2;
			gridBagConstraints62.gridx = 0;
			GridBagConstraints gridBagConstraints61 = new GridBagConstraints();
			gridBagConstraints61.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints61.gridy = 0;
			gridBagConstraints61.weightx = 1.0;
			gridBagConstraints61.anchor = GridBagConstraints.CENTER;
			gridBagConstraints61.gridwidth = 2;
			gridBagConstraints61.gridx = 0;
			GridBagConstraints gridBagConstraints60 = new GridBagConstraints();
			gridBagConstraints60.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints60.gridy = 1;
			gridBagConstraints60.weightx = 1.0;
			gridBagConstraints60.anchor = GridBagConstraints.CENTER;
			gridBagConstraints60.gridwidth = 2;
			gridBagConstraints60.gridx = 0;
			jPanel11 = new JPanel();
			jPanel11.setLayout(new GridBagLayout());
			jPanel11.add(getFeedbackSlider(), gridBagConstraints60);
			jPanel11.add(getSpawnSlider(), gridBagConstraints61);
			jPanel11.add(getMultiplicitySlider(), gridBagConstraints62);
			jPanel11.add(getNumStepsSlider(), gridBagConstraints63);
			jPanel11.add(getSetStartButton(), gridBagConstraints64);
			jPanel11.add(getPropagateButton(), gridBagConstraints65);
			jPanel11.add(ageLabel2, gridBagConstraints66);
			jPanel11.add(ageLabel21, gridBagConstraints67);
			jPanel11.add(numSteps, gridBagConstraints68);
			jPanel11.add(getSwapButton(), gridBagConstraints69);
			jPanel11.add(getResetButton(), gridBagConstraints27);
			jPanel11.add(ageSlider2, gridBagConstraints72);
			jPanel11.add(getAge2Slider(), gridBagConstraints73);
			jPanel11.add(feedback, gridBagConstraints76);
			jPanel11.add(getVisitedBox(), gridBagConstraints74);
		}
		return jPanel11;
	}

	private JTextArea getJTextFieldMsg() {
		if(jTextFieldMsg == null) {
			jTextFieldMsg = new JTextArea();
			jTextFieldMsg.setText("jTextField1");
			jTextFieldMsg.setWrapStyleWord(true);
			//			jTextFieldMsg.setVisible(true);
			getStatusMessage().setVisible(true);
		}
		return jTextFieldMsg;
	}

	/**
	 * This method initializes multiplicitySlider	
	 * 	
	 * @return javax.swing.JSlider	
	 */
	private JSlider getMultiplicitySlider() {
		if (multiplicitySlider == null) {
			multiplicitySlider = new JSlider();
			multiplicitySlider.setName("multiplicity");
			multiplicitySlider.setMinimum(1);
			multiplicitySlider.setMaximum(10);
			multiplicitySlider.setPaintLabels(false);
			multiplicitySlider.setPaintTrack(false);
			multiplicitySlider.setPaintTicks(true);
			multiplicitySlider.setMajorTickSpacing(10);
			multiplicitySlider.setMinorTickSpacing(1);
			multiplicitySlider.setValue(app.diffusor.getMult());
			multiplicitySlider.setSnapToTicks(true);
			multiplicitySlider.setToolTipText("set how many copies will be generated on average");
			multiplicitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
				public void stateChanged(javax.swing.event.ChangeEvent e) {
					app.diffusor.setMult(multiplicitySlider.getValue()); //  Auto-generated Event stub stateChanged()
				}
			});
		}
		return multiplicitySlider;
	}








	/**
	 * This method initializes numStepsSlider	
	 * 	
	 * @return javax.swing.JSlider	
	 */
	private JSlider getNumStepsSlider() {
		if (numStepsSlider == null) {
			numStepsSlider = new JSlider();
			numStepsSlider.setName("num steps");
			numStepsSlider.setMinimum(1);
			numStepsSlider.setMaximum(10);
			numStepsSlider.setPaintLabels(false);
			numStepsSlider.setPaintTrack(false);
			numStepsSlider.setPaintTicks(true);
			numStepsSlider.setValue(app.diffusor.getSteps());
			numStepsSlider.setMajorTickSpacing(10);
			numStepsSlider.setMinorTickSpacing(1);
			numStepsSlider.setSnapToTicks(true);
			numStepsSlider.setToolTipText("set number of steps calculated");
			numStepsSlider.addChangeListener(new javax.swing.event.ChangeListener() {
				public void stateChanged(javax.swing.event.ChangeEvent e) {
					app.diffusor.setSteps(numStepsSlider.getValue()); //  Auto-generated Event stub stateChanged()
				}
			});
		}
		return numStepsSlider;
	}

	/**
	 * This method initializes propagateButton	
	 * 	
	 * @return javax.swing.SimButton	
	 */
	private SimButton getPropagateButton() {
		if (propagateButton == null) {
			propagateButton = new SimButton();
			propagateButton.setText("propagate");
			propagateButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.diffusor.propagate(); //  Auto-generated Event stub actionPerformed()
				}
			});
		}
		return propagateButton;
	}

	/**
	 * This method initializes resetButton	
	 * 	
	 * @return javax.swing.SimButton	
	 */
	private SimButton getResetButton() {
		if (resetButton == null) {
			resetButton = new SimButton();
			resetButton.setText("reset");
			resetButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.diffusor.reset(); 
				}
			});
		}
		return resetButton;
	}

	/**
	 * This method initializes selectAButton	
	 * 	
	 * @return javax.swing.SimButton	
	 */
	private SimButton getSelectAButton() {
		if (selectAButton == null) {
			selectAButton = new SimButton();
			selectAButton.setText("> selected");
			selectAButton.setFont(new Font("Dialog", Font.PLAIN, 10));
			selectAButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					columnAField.setText(app.getPicked().name); //  Auto-generated Event stub actionPerformed()
				}
			});
		}
		return selectAButton;
	}

	/**
	 * This method initializes selectBButton	
	 * 	
	 * @return javax.swing.SimButton	
	 */
	private SimButton getSelectBButton() {
		if (selectBButton == null) {
			selectBButton = new SimButton();
			selectBButton.setText("> selected");
			selectBButton.setFont(new Font("Dialog", Font.PLAIN, 10));
			selectBButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					columnBField.setText(app.getPicked().name); //  Auto-generated Event stub actionPerformed()
				}
			});
		}
		return selectBButton;
	}

	/**
	 * This method initializes setStartButton	
	 * 	
	 * @return javax.swing.SimButton	
	 */
	private SimButton getSetStartButton() {
		if (setStartButton == null) {
			setStartButton = new SimButton();
			setStartButton.setText("start");
			setStartButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.diffusor.setStart(); //  Auto-generated Event stub actionPerformed()
				}
			});
		}
		return setStartButton;
	}

	/**
	 * This method initializes contagiousSlider	
	 * 	
	 * @return javax.swing.JSlider	
	 */
	private JSlider getSpawnSlider() {
		if (spawnSlider == null) {
			spawnSlider = new JSlider();
			spawnSlider.setName("growth factor");
			spawnSlider.setMinimum(0);
			spawnSlider.setMaximum(100);
			spawnSlider.setPaintLabels(false);
			spawnSlider.setPaintTrack(false);
			spawnSlider.setPaintTicks(true);
			spawnSlider.setValue(app.diffusor.getProp());
			spawnSlider.setMinorTickSpacing(10);
			spawnSlider.setMajorTickSpacing(50);
			spawnSlider.setToolTipText("set probability to add new nodes");
			spawnSlider.addChangeListener(new javax.swing.event.ChangeListener() {
				public void stateChanged(javax.swing.event.ChangeEvent e) {
					app.diffusor.setProp(spawnSlider.getValue()); 
				}
			});
		}
		return spawnSlider;
	}

	/**
	 * This method initializes swapButton	
	 * 	
	 * @return javax.swing.SimButton	
	 */
	private SimButton getSwapButton() {
		if (swapButton == null) {
			swapButton = new SimButton();
			swapButton.setText("isolate");
			swapButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.diffusor.showQueue(); //  Auto-generated Event stub actionPerformed()
				}
			});
		}
		return swapButton;
	}

	/**
	 * This method initializes visitedBox	
	 * 	
	 * @return javax.swing.JCheckBox	
	 */
	private JCheckBox getVisitedBox() {
		if (visitedBox == null) {
			visitedBox = new JCheckBox();
			visitedBox.setText("multiple visits");
			visitedBox.setSelected(app.diffusor.allowVisit);
			visitedBox.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.diffusor.allowVisit = !app.diffusor.allowVisit;	 
				}
			});
		}
		return visitedBox;
	}


	private void newETable() {
		eTableModel.setColumnCount(2);
		while (eTableModel.getRowCount() > 0) {
			eTableModel.removeRow(0);
		}
	}

	public void setCounter() {
		String title = "SemaSpace - "+app.nets.global.nNodes.size()+" Nodes, "+app.nets.global.nEdges.size()+" Edges";
		if (app.net!=app.nets.global) title+="; visible: "+app.net.nNodes.size()+" Nodes, "+app.net.nEdges.size()+" Edges";
		getMainWindow().setTitle(title);
	}

	public void setMsg(String msg){
		getJTextFieldMsg().setText(msg);
	}
	protected void setSema(SemaSpace space) {
		app = space;
		app.setSwing(this);
	}

	private void initSliders() {
		//		feedbackSlider.setValue(app.diffusor.getFeedback());
		//		multiplicitySlider.setValue(app.diffusor.getMult());
		//		numStepsSlider.setValue(app.diffusor.getSteps());
		//		spawnSlider.setValue(app.diffusor.getProp());
		//		age2Slider.setValue((int)app.getAgeThresh());
		depth.setValue((int) (app.getDepth()));
		fontslider.setValue(app.getFonttype());
		sizeSlider.setValue((int)(app.getSize()));
		valenzSlider.setValue((int)(app.getVal()*100));
		groupRadius.setValue((int)(app.getClusterRad()*10));
		pushSlider.setValue((int)(app.getRepell()));
		stretchSlider.setValue((int)(app.getPermInflate()*100));
		strengthSlider.setValue((int)(app.getStrength()*100));
		distanceSlider.setValue((int)app.getDistance());
		picSizeSlider.setValue(app.getPicSize());
		jSlider2.setValue((int)app.getNodevar()*10);
	}



	private JScrollPane getNodeAttPane() {
		if(nodeAttPane == null) {
			nodeAttPane = new JScrollPane();
			nodeAttPane.setViewportView(getNodeAttList());
		}
		return nodeAttPane;
	}

	private JList getNodeAttList() {
		if(nodeAttList == null) {
			nodeAttModel =  new DefaultListModel();
			nodeAttModel.addElement("none");
			nodeAttList = new JList(nodeAttModel);

			nodeAttList.setName("nodeAttributes");
			nodeAttList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			nodeAttList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
				public void valueChanged(
						javax.swing.event.ListSelectionEvent e) {
					String out = (String) nodeAttList.getSelectedValue();
					if (out!=null) {
						if (change) {
							app.setAttribute(out);
							change = false;
							if (edgeAttModel.contains(out))	edgeAttList.setSelectedValue(out, true);
							else edgeAttList.setSelectedIndex(0);
						} else change = true;
					}
				}
			});
		} else {
			nodeAttModel.clear();
			nodeAttModel.addElement("none");
			for (String s : app.nets.global.nodeattributes) {
				nodeAttModel.addElement(s);
			}
		}
		return nodeAttList;
	}

	private JSplitPane getAttributeSplitPane1() {
		if(AttributeSplitPane1 == null) {
			AttributeSplitPane1 = new JSplitPane();
			AttributeSplitPane1.setDividerLocation(100);
			AttributeSplitPane1.setDividerSize(2);
			AttributeSplitPane1.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
			//	AttributeSplitPane1.setBackground(new java.awt.Color(192,192,192));
			AttributeSplitPane1.add(getNodeAttPane(), JSplitPane.RIGHT);
			AttributeSplitPane1.add(getEdgeAttPane(), JSplitPane.LEFT);
		}
		return AttributeSplitPane1;
	}

	private JScrollPane getEdgeAttPane() {
		if(edgeAttPane == null) {
			edgeAttPane = new JScrollPane();
			edgeAttPane.setViewportView(getEdgeAttList());
		}
		return edgeAttPane;
	}

	private JList getEdgeAttList() {
		if(edgeAttList == null) {
			edgeAttModel =  new DefaultListModel();
			edgeAttModel.addElement("none");
			edgeAttList = new JList();
			edgeAttList.setModel(edgeAttModel);
			edgeAttList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			edgeAttList.setName("edgeAttributes");
			edgeAttList.addListSelectionListener(new ListSelectionListener() {
				public void valueChanged(ListSelectionEvent e) {
					String out = (String) edgeAttList.getSelectedValue();
					if (out!=null) {
						if (change) {
							app.setAttribute(out);
							change = false;
							if (nodeAttModel.contains(out)) nodeAttList.setSelectedValue(out, true);
							else nodeAttList.setSelectedIndex(0);
						} else change = true;
					} 
					//					textHilight();
				}
			});
		} 
		return edgeAttList;
	}
	private JSplitPane getJSplitPane() {
		if (jSplitPane == null) {
			jSplitPane = new JSplitPane();
			jSplitPane.setResizeWeight(0.0D);
			jSplitPane.setDividerLocation(220);
			jSplitPane.setDividerSize(0);
			jSplitPane.setPreferredSize(new Dimension(1000,800));
			jSplitPane.add(getJSplitPane1(), JSplitPane.LEFT);
			jSplitPane.add(getDummyPanel(), JSplitPane.RIGHT);
		}
		return jSplitPane;
	}
	private JTabbedPane getControlPanel() {
		if (controlPanel == null) {
			controlPanel = new JTabbedPane();
			controlPanel.setPreferredSize(new java.awt.Dimension(219,525));
			controlPanel.addTab("files", null, getFile(), null);
			controlPanel.addTab("view", null, getDataTab(), null);
			controlPanel.addTab("render", null, getViewTab(), null);
			controlPanel.addTab("layout", null, getLayoutTab(), null);
		}
		return controlPanel;
	}
	private JSplitPane getJSplitPane1() {
		if (jSplitPane1 == null) {
			jSplitPane1 = new JSplitPane();
			jSplitPane1.setPreferredSize(new java.awt.Dimension(214,499));
			jSplitPane1.setOrientation(JSplitPane.VERTICAL_SPLIT);
			jSplitPane1.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
			jSplitPane1.setDividerSize(0);
			jSplitPane1.setDoubleBuffered(true);
			jSplitPane1.add(getJSplitPane2(), JSplitPane.TOP);
			jSplitPane1.add(getInspectors(), JSplitPane.BOTTOM);
		}
		return jSplitPane1;
	}
	private JTabbedPane getInspectors() {
		if (inspectors == null) {
			inspectors = new JTabbedPane();
			inspectors.setPreferredSize(new java.awt.Dimension(212, 160));
			inspectors.addTab("net", null, getNets(), null);
			inspectors.addTab("node", null, getNodes(), null);
			inspectors.addTab("edge", null, getEdgeWndSplitPane(), null);
			inspectors.addTab("attrib", null, getAttributeSplitPane1(), null);
		}
		return inspectors;
	}
	private JScrollPane getNodes() {
		if (nodes == null) {
			nodes = new JScrollPane();
			nodes.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
			nodes.setViewportView(getNodeList());
		}
		return nodes;
	}
	private JList getNodeList() {
		if (nodeList == null) {
			nodeListModel = new DefaultListModel();
			nodeList = new JList();
			nodeList.setModel(nodeListModel);
			nodeList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			nodeList.setName("nodes");
			nodeList.addListSelectionListener(new ListSelectionListener() {
				public void valueChanged(ListSelectionEvent e) {
					String out = (String) nodeList.getSelectedValue();
					if (out!=null) app.setPickID(out.hashCode());
					//					System.out.println(out); 
				}
			});
		}
		return nodeList;
	}
	private JList getNetList() {
		if (netList == null) {
			netListModel = new DefaultListModel();
			netList = new JList();
			netList.setModel(netListModel);
			netList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			netList.setName("nets");
			netList.addListSelectionListener(new ListSelectionListener() {
				public void valueChanged(ListSelectionEvent e) {
					String out = (String) netList.getSelectedValue();
					if (out!=null) app.setSubnet(out);
				}
			});
		}
		return netList;
	}

	private JPanel getDataTab() {
		if (dataTab == null) {
			GridBagConstraints gridBagConstraints123 = new GridBagConstraints();
			gridBagConstraints123.gridx = 2;
			gridBagConstraints123.anchor = GridBagConstraints.CENTER;
			gridBagConstraints123.insets = new Insets(15, 0, 0, 0);
			gridBagConstraints123.gridy = 26;
			GridBagConstraints gridBagConstraints211 = new GridBagConstraints();
			gridBagConstraints211.gridx = 2;
			gridBagConstraints211.anchor = GridBagConstraints.WEST;
			gridBagConstraints211.gridy = 18;
			GridBagConstraints gridBagConstraints122 = new GridBagConstraints();
			gridBagConstraints122.fill = GridBagConstraints.BOTH;
			gridBagConstraints122.gridy = 18;
			gridBagConstraints122.weightx = 1.0;
			gridBagConstraints122.gridwidth = 2;
			gridBagConstraints122.gridx = 0;
			GridBagConstraints gridBagConstraints121 = new GridBagConstraints();
			gridBagConstraints121.gridx = 2;
			gridBagConstraints121.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints121.gridy = 7;
			GridBagConstraints gridBagConstraints310 = new GridBagConstraints();
			gridBagConstraints310.gridx = 2;
			gridBagConstraints310.anchor = GridBagConstraints.WEST;
			gridBagConstraints310.gridy = 13;
			GridBagConstraints gridBagConstraints120 = new GridBagConstraints();
			gridBagConstraints120.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints120.gridy = 13;
			gridBagConstraints120.weightx = 1.0;
			gridBagConstraints120.gridwidth = 2;
			gridBagConstraints120.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints120.gridx = 0;
			GridBagConstraints gridBagConstraints210 = new GridBagConstraints();
			gridBagConstraints210.gridx = 0;
			gridBagConstraints210.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints210.gridy = 6;
			GridBagConstraints gridBagConstraints119 = new GridBagConstraints();
			gridBagConstraints119.gridx = 1;
			gridBagConstraints119.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints119.gridy = 6;
			GridBagConstraints gridBagConstraints118 = new GridBagConstraints();
			gridBagConstraints118.gridx = 2;
			gridBagConstraints118.anchor = GridBagConstraints.WEST;
			gridBagConstraints118.gridy = 20;
			GridBagConstraints gridBagConstraints29 = new GridBagConstraints();
			gridBagConstraints29.gridx = 2;
			gridBagConstraints29.gridy = 25;
			GridBagConstraints gridBagConstraints117 = new GridBagConstraints();
			gridBagConstraints117.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints117.gridy = 0;
			gridBagConstraints117.gridwidth = 3;
			gridBagConstraints117.anchor = GridBagConstraints.WEST;
			gridBagConstraints117.gridx = 0;
			GridBagConstraints gridBagConstraints116 = new GridBagConstraints();
			gridBagConstraints116.gridx = 0;
			gridBagConstraints116.insets = new Insets(15, 0, 0, 0);
			gridBagConstraints116.gridwidth = 2;
			gridBagConstraints116.anchor = GridBagConstraints.CENTER;
			gridBagConstraints116.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints116.gridy = 26;
			GridBagConstraints gridBagConstraints115 = new GridBagConstraints();
			gridBagConstraints115.gridx = 0;
			gridBagConstraints115.gridwidth = 1;
			gridBagConstraints115.anchor = GridBagConstraints.WEST;
			gridBagConstraints115.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints115.gridy = 25;
			GridBagConstraints gridBagConstraints114 = new GridBagConstraints();
			gridBagConstraints114.gridx = 2;
			gridBagConstraints114.gridy = 2;
			GridBagConstraints gridBagConstraints113 = new GridBagConstraints();
			gridBagConstraints113.gridx = 0;
			gridBagConstraints113.anchor = GridBagConstraints.WEST;
			gridBagConstraints113.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints113.gridy = 22;
			GridBagConstraints gridBagConstraints111 = new GridBagConstraints();
			gridBagConstraints111.gridx = 0;
			gridBagConstraints111.anchor = GridBagConstraints.WEST;
			gridBagConstraints111.gridy = 24;
			GridBagConstraints gridBagConstraints110 = new GridBagConstraints();
			gridBagConstraints110.gridx = 1;
			gridBagConstraints110.anchor = GridBagConstraints.WEST;
			gridBagConstraints110.gridy = 21;
			GridBagConstraints gridBagConstraints26 = new GridBagConstraints();
			gridBagConstraints26.gridx = 1;
			gridBagConstraints26.gridy = 23;
			GridBagConstraints gridBagConstraints19 = new GridBagConstraints();
			gridBagConstraints19.gridx = 2;
			gridBagConstraints19.anchor = GridBagConstraints.WEST;
			gridBagConstraints19.gridy = 23;
			GridBagConstraints gridBagConstraints18 = new GridBagConstraints();
			gridBagConstraints18.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints18.gridy = 21;
			gridBagConstraints18.weightx = 1.0;
			gridBagConstraints18.gridwidth = 1;
			gridBagConstraints18.gridx = 0;
			GridBagConstraints gridBagConstraints17 = new GridBagConstraints();
			gridBagConstraints17.gridx = 0;
			gridBagConstraints17.gridwidth = 1;
			gridBagConstraints17.anchor = GridBagConstraints.WEST;
			gridBagConstraints17.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints17.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints17.gridy = 7;
			GridBagConstraints gridBagConstraints25 = new GridBagConstraints();
			gridBagConstraints25.gridx = 2;
			gridBagConstraints25.anchor = GridBagConstraints.WEST;
			gridBagConstraints25.gridy = 16;
			GridBagConstraints gridBagConstraints16 = new GridBagConstraints();
			gridBagConstraints16.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints16.gridy = 16;
			gridBagConstraints16.weightx = 1.0;
			gridBagConstraints16.gridwidth = 2;
			gridBagConstraints16.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints16.gridx = 0;
			GridBagConstraints gridBagConstraints15 = new GridBagConstraints();
			gridBagConstraints15.gridx = 1;
			gridBagConstraints15.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints15.gridy = 20;
			GridBagConstraints gridBagConstraints42 = new GridBagConstraints();
			gridBagConstraints42.gridx = 0;
			gridBagConstraints42.anchor = GridBagConstraints.WEST;
			gridBagConstraints42.gridheight = 1;
			gridBagConstraints42.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints42.gridwidth = 3;
			gridBagConstraints42.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints42.gridy = 9;
			GridBagConstraints gridBagConstraints33 = new GridBagConstraints();
			gridBagConstraints33.gridx = 0;
			gridBagConstraints33.anchor = GridBagConstraints.WEST;
			gridBagConstraints33.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints33.gridwidth = 3;
			gridBagConstraints33.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints33.gridy = 1;
			GridBagConstraints gridBagConstraints24 = new GridBagConstraints();
			gridBagConstraints24.gridx = 0;
			gridBagConstraints24.gridwidth = 3;
			gridBagConstraints24.anchor = GridBagConstraints.WEST;
			gridBagConstraints24.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints24.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints24.gridy = 4;
			GridBagConstraints gridBagConstraints14 = new GridBagConstraints();
			gridBagConstraints14.gridx = 1;
			gridBagConstraints14.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints14.gridy = 2;
			GridBagConstraints gridBagConstraints23 = new GridBagConstraints();
			gridBagConstraints23.gridx = 2;
			gridBagConstraints23.anchor = GridBagConstraints.EAST;
			gridBagConstraints23.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints23.gridwidth = 1;
			gridBagConstraints23.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints23.gridy = 6;
			GridBagConstraints gridBagConstraints13 = new GridBagConstraints();
			gridBagConstraints13.gridx = 0;
			gridBagConstraints13.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints13.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints13.gridy = 2;
			GridBagConstraints gridBagConstraints22 = new GridBagConstraints();
			gridBagConstraints22.gridx = 2;
			gridBagConstraints22.anchor = GridBagConstraints.WEST;
			gridBagConstraints22.gridy = 21;
			GridBagConstraints gridBagConstraints12 = new GridBagConstraints();
			gridBagConstraints12.gridx = 0;
			gridBagConstraints12.anchor = GridBagConstraints.WEST;
			gridBagConstraints12.gridy = 21;
			GridBagConstraints gridBagConstraints8 = new GridBagConstraints();
			gridBagConstraints8.gridx = 2;
			gridBagConstraints8.anchor = GridBagConstraints.WEST;
			gridBagConstraints8.gridy = 19;
			GridBagConstraints gridBagConstraints7 = new GridBagConstraints();
			gridBagConstraints7.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints7.gridy = 19;
			gridBagConstraints7.weightx = 1.0;
			gridBagConstraints7.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints7.gridwidth = 2;
			gridBagConstraints7.gridx = 0;
			GridBagConstraints gridBagConstraints6 = new GridBagConstraints();
			gridBagConstraints6.gridx = 2;
			gridBagConstraints6.anchor = GridBagConstraints.WEST;
			gridBagConstraints6.gridy = 14;
			GridBagConstraints gridBagConstraints51 = new GridBagConstraints();
			gridBagConstraints51.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints51.gridy = 14;
			gridBagConstraints51.weightx = 1.0;
			gridBagConstraints51.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints51.gridwidth = 2;
			gridBagConstraints51.gridx = 0;
			GridBagConstraints gridBagConstraints41 = new GridBagConstraints();
			gridBagConstraints41.gridx = 2;
			gridBagConstraints41.anchor = GridBagConstraints.WEST;
			gridBagConstraints41.gridy = 12;
			GridBagConstraints gridBagConstraints32 = new GridBagConstraints();
			gridBagConstraints32.gridx = 2;
			gridBagConstraints32.anchor = GridBagConstraints.WEST;
			gridBagConstraints32.gridy = 11;
			GridBagConstraints gridBagConstraints21 = new GridBagConstraints();
			gridBagConstraints21.gridx = 2;
			gridBagConstraints21.anchor = GridBagConstraints.WEST;
			gridBagConstraints21.gridy = 10;
			GridBagConstraints gridBagConstraints11 = new GridBagConstraints();
			gridBagConstraints11.gridx = 2;
			gridBagConstraints11.gridy = 8;
			GridBagConstraints gridBagConstraints31 = new GridBagConstraints();
			gridBagConstraints31.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints31.gridy = 8;
			gridBagConstraints31.weightx = 1.0;
			gridBagConstraints31.anchor = GridBagConstraints.WEST;
			gridBagConstraints31.gridwidth = 2;
			gridBagConstraints31.insets = new Insets(3, 0, 2, 0);
			gridBagConstraints31.gridx = 0;
			GridBagConstraints gridBagConstraints5 = new GridBagConstraints();
			gridBagConstraints5.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints5.gridx = 0;
			gridBagConstraints5.gridy = 20;
			gridBagConstraints5.anchor = GridBagConstraints.WEST;
			gridBagConstraints5.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints5.weightx = 0.0;
			gridBagConstraints5.gridwidth = 1;
			GridBagConstraints gridBagConstraints4 = new GridBagConstraints();
			gridBagConstraints4.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints4.gridwidth = 2;
			gridBagConstraints4.gridx = 0;
			gridBagConstraints4.gridy = 12;
			gridBagConstraints4.weightx = 1.0;
			gridBagConstraints4.insets = new Insets(0, 0, 0, 0);
			GridBagConstraints gridBagConstraints3 = new GridBagConstraints();
			gridBagConstraints3.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints3.gridwidth = 2;
			gridBagConstraints3.gridx = 0;
			gridBagConstraints3.gridy = 11;
			gridBagConstraints3.weightx = 1.0;
			gridBagConstraints3.insets = new Insets(0, 0, 0, 0);
			GridBagConstraints gridBagConstraints2 = new GridBagConstraints();
			gridBagConstraints2.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints2.gridwidth = 2;
			gridBagConstraints2.gridx = 0;
			gridBagConstraints2.gridy = 10;
			gridBagConstraints2.weightx = 1.0;
			gridBagConstraints2.insets = new Insets(0, 0, 0, 0);
			GridBagConstraints gridBagConstraints1 = new GridBagConstraints();
			gridBagConstraints1.insets = new Insets(0, 0, 0, 0);
			gridBagConstraints1.gridy = 5;
			gridBagConstraints1.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints1.weightx = 0.0;
			gridBagConstraints1.anchor = GridBagConstraints.EAST;
			gridBagConstraints1.gridx = 2;
			GridBagConstraints gridBagConstraints = new GridBagConstraints();
			gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
			gridBagConstraints.gridx = 0;
			gridBagConstraints.gridy = 5;
			gridBagConstraints.weightx = 1.0;
			gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
			gridBagConstraints.gridwidth = 2;
			gridBagConstraints.insets = new Insets(5, 5, 5, 5);
			dataTab = new JPanel();
			dataTab.setPreferredSize(new java.awt.Dimension(220, 240));
			dataTab.setMinimumSize(new Dimension(220,33));
			GridBagLayout controlPanelLayout = new GridBagLayout();
			dataTab.setLayout(controlPanelLayout);
			dataTab.setFont(new java.awt.Font("Dialog",0,10));
			dataTab.add(getSearchTerm(), new GridBagConstraints(0, 2, 2, 1, 1.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			dataTab.add(getSearchButton(), new GridBagConstraints(2, 2, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getDepth(), new GridBagConstraints(0, 5, 2, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(3, 0, 2, 0), 0, 0));
			dataTab.add(getDepthLabel(), new GridBagConstraints(2, 5, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			dataTab.add(getSeachSelButton(), new GridBagConstraints(2, 3, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getSearch(), new GridBagConstraints(0, 1, 3, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			dataTab.add(getElimButton1(), new GridBagConstraints(1, 8, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getInterrupt(), new GridBagConstraints(2, 10, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			dataTab.add(getRandomCenter(), new GridBagConstraints(1, 3, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getShowAll(), new GridBagConstraints(0, 4, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getExpand2(), new GridBagConstraints(2, 4, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getExpandnet(), new GridBagConstraints(1, 4, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getSimButton2(), new GridBagConstraints(0, 8, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getJCheckBox1(), new GridBagConstraints(0, 10, 2, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			dataTab.add(getJLabel2(), new GridBagConstraints(0, 6, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			dataTab.add(getJSlider1(), new GridBagConstraints(0, 9, 2, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(3, 0, 2, 0), 0, 0));
			dataTab.add(getJLabel7(), new GridBagConstraints(2, 9, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			dataTab.add(getSimButton1(), new GridBagConstraints(0, 7, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getSimButton2x(), new GridBagConstraints(2, 12, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getSimButton3(), new GridBagConstraints(1, 12, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getJLabel8(), new GridBagConstraints(0, 11, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			dataTab.add(getJCheckBox2(), new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			dataTab.add(getSimButton7(), new GridBagConstraints(2, 8, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getSimButton8(), new GridBagConstraints(1, 7, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			dataTab.add(getSimButton9(), new GridBagConstraints(2, 7, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			controlPanelLayout.columnWidths = new int[] {7, 7, 7};
			controlPanelLayout.rowHeights = new int[] {7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7};
			controlPanelLayout.columnWeights = new double[] {0.1, 0.1, 0.1};
			controlPanelLayout.rowWeights = new double[] {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1};
			controlPanelLayout.columnWeights = new double[] {0.1, 0.1, 0.1};
			controlPanelLayout.columnWidths = new int[] {7, 7, 7};
			controlPanelLayout.rowWeights = new double[] {0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.1, 0.1, 0.1, 0.0, 0.1, 0.0, 0.1};
			controlPanelLayout.rowHeights = new int[] {20, 7, 7, 7, 7, 7, 20, 20, 20, 20, 7, 20, 7, 7};
			//			controlPanel.setAlignmentY(Component.TOP_ALIGNMENT);
			//			controlPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
			//			controlPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
		}
		return dataTab;
	}
	private JTextField getSearchTerm() {
		if (searchTerm == null) {
			searchTerm = new JTextField();
			searchTerm.setPreferredSize(new Dimension(100,20));
			searchTerm.setBorder(BorderFactory.createEmptyBorder(0,0,0,0));
			searchTerm.addKeyListener(new KeyAdapter() {
				public void keyReleased(java.awt.event.KeyEvent e) {
					//					System.out.println(searchTerm.getText()+" key:"+e.getKeyCode());
					if (e.getKeyCode()==10) app.netSearchSubstring(searchTerm.getText(),add.isSelected());
					textHilight();
				}


			});
		}
		return searchTerm;
	}

	private SimButton getSearchButton() {
		if (searchButton == null) {
			searchButton = new SimButton();
			searchButton.setText("search");
			searchButton.setFont(new java.awt.Font("Dialog",0,10));
			searchButton.setVerticalAlignment(SwingConstants.CENTER);
			searchButton.setVerticalTextPosition(SwingConstants.CENTER);
			searchButton.setPreferredSize(new java.awt.Dimension(0,0));
			searchButton.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.netSearchSubstring(searchTerm.getText(), add.isSelected());
					textHilight();
				}
			});
		}
		return searchButton;
	}
	private void textHilight() {
		app.net.app.clearFrames(app.net);
		if (searchTerm.getText().length()>0) app.findSubstringAttributes(searchTerm.getText(), app.getAttribute());
	}
	private JSlider getDepth() {
		if (depth == null) {
			depth = new JSlider();
			depth.setName("depth");
			depth.setMaximum(10);
			depth.setPaintLabels(true);
			depth.setValue((int) (app.getDepth()));
			depth.setMajorTickSpacing(1);
			depth.setPaintTrack(false);
			depth.setSnapToTicks(true);
			depth.setFont(new java.awt.Font("Verdana",0,7));
			depth.setInverted(false);
			depth.setToolTipText("searchdepth");
			depth.setOpaque(false);
			depth.addChangeListener(new ChangeListener() {
				public void stateChanged(javax.swing.event.ChangeEvent e) {
					app.setDepth(depth.getValue());
				}
			});
		}
		return depth;
	}
	private JLabel getDepthLabel() {
		if (depthLabel == null) {
			depthLabel = new JLabel();
			depthLabel.setText("search steps");
			depthLabel.setFont(new java.awt.Font("Dialog",0,10));
		}
		return depthLabel;
	}

	private SimButton getSeachSelButton() {
		if (seachSelButton == null) {
			seachSelButton = new SimButton();
			seachSelButton.setFont(new java.awt.Font("Dialog",0,10));
			seachSelButton.setText("search picked");
			seachSelButton.setVerticalAlignment(SwingConstants.CENTER);
			seachSelButton.setVerticalTextPosition(SwingConstants.CENTER);
			seachSelButton.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.netSearchPicked(add.isSelected());
				}
			});
		}
		return seachSelButton;
	}
	private JLabel getSearch() {
		if (search == null) {
			search = new JLabel();
			search.setText("search");
			search.setFont(new java.awt.Font("Dialog",1,11));
			//			search.setBackground(new java.awt.Color(192,192,192));
		}
		return search;
	}
	private SimButton getElimButton1() {
		if (elimButton1 == null) {
			elimButton1 = new SimButton();
			elimButton1.setFont(new java.awt.Font("Dialog",0,10));
			elimButton1.setText("leaf nodes");
			elimButton1.setVerticalAlignment(SwingConstants.CENTER);
			elimButton1.setVerticalTextPosition(SwingConstants.CENTER);
			elimButton1.setPreferredSize(new Dimension(0,0));
			elimButton1.setToolTipText("remove leave nodes");
			elimButton1.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.net.clustersDelete();
					//					SemaSpace.globalNet.eliminateClusters();
				}
			});
		}
		return elimButton1;
	}
	private SimButton getInterrupt() {
		if (interrupt == null) {
			interrupt = new SimButton();
			interrupt.setVisible(false);
			interrupt.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.net.interrupt();
				}
			});
		}
		return interrupt;
	}
	private SimButton getRandomCenter() {
		if (randomCenter == null) {
			randomCenter = new SimButton();
			randomCenter.setFont(new java.awt.Font("Dialog",0,10));
			randomCenter.setVerticalAlignment(SwingConstants.CENTER);
			randomCenter.setVerticalTextPosition(SwingConstants.CENTER);
			randomCenter.setText("search random");
			randomCenter.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.netStartRandom(add.isSelected());
				}
			});
		}
		return randomCenter;
	}
	private SimButton getShowAll() {
		if (showAll == null) {
			showAll = new SimButton();
			showAll.setFont(new java.awt.Font("Dialog",0,10));
			showAll.setVerticalAlignment(SwingConstants.CENTER);
			showAll.setVerticalTextPosition(SwingConstants.CENTER);
			showAll.setText("show all");
			showAll.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.netShowAll(); //  Auto-generated Event stub actionPerformed()
				}
			});
		}
		return showAll;
	}
	private SimButton getExpand2() {
		if (expand2 == null) {
			expand2 = new SimButton();
			expand2.setFont(new java.awt.Font("Dialog",0,10));
			expand2.setText("expand picked");
			expand2.setVerticalAlignment(SwingConstants.CENTER);
			expand2.setVerticalTextPosition(SwingConstants.CENTER);
			expand2.setPreferredSize(new Dimension(0,0));
			expand2.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.netExpandNode(); //  Auto-generated Event stub actionPerformed()
				}
			});
		}
		return expand2;
	}
	private SimButton getExpandnet() {
		if (expandnet == null) {
			expandnet = new SimButton();
			expandnet.setText("expand all");
			expandnet.setVerticalAlignment(SwingConstants.CENTER);
			expandnet.setVerticalTextPosition(SwingConstants.CENTER);
			expandnet.setFont(new java.awt.Font("Dialog",0,10));
			expandnet.setPreferredSize(new Dimension(0,0));
			expandnet.setMargin(new java.awt.Insets(2,2,2,2));
			expandnet.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.netExpand();
				}
			});
		}
		return expandnet;
	}
	private SimButton getSimButton2() {
		if (SimButton2 == null) {
			SimButton2 = new SimButton();
			SimButton2.setText("isolated");
			SimButton2.setVerticalAlignment(SwingConstants.CENTER);
			SimButton2.setVerticalTextPosition(SwingConstants.CENTER);
			SimButton2.setFont(new java.awt.Font("Dialog",0,10));
			SimButton2.setPreferredSize(new Dimension(0,0));
			SimButton2.setToolTipText("remove isolated nodes");
			SimButton2.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.delIsolated();
				}
			});
		}
		return SimButton2;
	}
	private JCheckBox getJCheckBox1() {
		if (directedGraph == null) {
			directedGraph = new JCheckBox();
			directedGraph.setText("directed graph");
			directedGraph.setMargin(new java.awt.Insets(0,0,0,0));
			directedGraph.setContentAreaFilled(false);
			directedGraph.setFont(new java.awt.Font("Dialog",0,10));
			directedGraph.setSelected(app.directed);
			directedGraph.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.directed=directedGraph.isSelected();
					app.net.setDirected(app.directed);
					app.updatePick();
				}
			});
		}
		return directedGraph;
	}
	private JLabel getJLabel2() {
		if (jLabel2 == null) {
			jLabel2 = new JLabel();
			jLabel2.setText("remove");
			jLabel2.setFont(new java.awt.Font("Dialog",1,11));
		}
		return jLabel2;
	}
	private JPanel getViewTab() {
		if (viewTab == null) {
			viewTab = new JPanel();
			GridBagLayout viewLayout = new GridBagLayout();
			viewLayout.columnWidths = new int[] {7, 7, 7};
			viewLayout.rowHeights = new int[] {7, 7, 7, 20, 20, 20, 20, 7, 7, 20, 20, 20, 20};
			viewLayout.columnWeights = new double[] {0.1, 0.1, 0.1};
			viewLayout.rowWeights = new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
			viewTab.setLayout(viewLayout);
			//			viewTab.setBackground(new java.awt.Color(192,192,192));
			viewTab.add(getTexButton1(), new GridBagConstraints(2, 8, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			viewTab.add(getEdgBox1(), new GridBagConstraints(2, 12, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getNoRender(), new GridBagConstraints(0, 1, 2, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getJCheckBox(), new GridBagConstraints(2, 1, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getShuffleButton(), new GridBagConstraints(1, 2, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			viewTab.add(getInflateButton(), new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			viewTab.add(getDisplay(), new GridBagConstraints(0, 0, 3, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getSizeSlider(), new GridBagConstraints(0, 4, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getSizeLabel(), new GridBagConstraints(2, 4, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getPicSizeSlider(), new GridBagConstraints(0, 5, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getJLabel9(), new GridBagConstraints(2, 5, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getJSlider2(), new GridBagConstraints(0, 6, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getJLabel10(), new GridBagConstraints(2, 6, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getSimButton4(), new GridBagConstraints(0, 10, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			viewTab.add(getSimButton5(), new GridBagConstraints(1, 10, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			viewTab.add(getJLabel11(), new GridBagConstraints(0, 9, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getBoxLayout(), new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			viewTab.add(getCircle(), new GridBagConstraints(1, 3, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			viewTab.add(getJCheckBox2x(), new GridBagConstraints(0, 12, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getSimButton10(), new GridBagConstraints(2, 3, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(1, 1, 1, 1), 0, 0));
			viewTab.add(getJLabel12(), new GridBagConstraints(0, 11, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			viewTab.add(getDrawClusters(), new GridBagConstraints(1, 12, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
		}
		return viewTab;
	}
	private SimButton getTexButton1() {
		if (texButton1 == null) {
			texButton1 = new SimButton();
			texButton1.setFont(new java.awt.Font("Dialog",0,10));
			texButton1.setToolTipText("reload textures for current view");
			texButton1.setText("reload Tex");
			texButton1.setPreferredSize(new Dimension(60,20));
			texButton1.setMargin(new java.awt.Insets(2,2,2,2));
			texButton1.setVisible(false);
			texButton1.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.fileIO.loadTexturesUrl( app.texfolder, app.net, app.thumbsize);
				}
			});
		}
		return texButton1;
	}
	private JCheckBox getEdgBox1() {
		if (drawedges == null) {
			drawedges = new JCheckBox();
			drawedges.setText("edges");
			drawedges.setMargin(new java.awt.Insets(0,0,0,0));
			drawedges.setContentAreaFilled(false);
			drawedges.setFont(new java.awt.Font("Dialog",0,10));
			drawedges.setSelected(app.edges);
			drawedges.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.edges=drawedges.isSelected();
				}
			});
		}
		return drawedges;
	}
	private JCheckBox getNoRender() {
		if (noRender == null) {
			noRender = new JCheckBox();
			noRender.setSelected(app.render);
			noRender.setText("render on / off");
			noRender.setToolTipText("allows to speed up operations by interupting rendering");
			noRender.setMargin(new java.awt.Insets(0,0,0,0));
			noRender.setContentAreaFilled(false);
			noRender.setFont(new java.awt.Font("Dialog",0,10));
			noRender.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.render=noRender.isSelected(); 
				}
			});
		}
		return noRender;
	}
	private JCheckBox getJCheckBox() {
		if (draw3d == null) {
			draw3d = new JCheckBox();
			draw3d.setText("3D");
			draw3d.setMargin(new java.awt.Insets(0,0,0,0));
			draw3d.setContentAreaFilled(false);
			draw3d.setFont(new java.awt.Font("Dialog",0,10));
			draw3d.setSelected(!app.get3D());
			draw3d.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.toggle3D();
					draw3d.setSelected(!app.get3D());
				}
			});
		}
		return draw3d;
	}
	private SimButton getShuffleButton() {
		if (shuffleButton == null) {
			shuffleButton = new SimButton();
			shuffleButton.setFont(new Font("Dialog",Font.PLAIN,10));
			shuffleButton.setToolTipText("randomize layout");
			shuffleButton.setText("shuffle");
			shuffleButton.setPreferredSize(new Dimension(60,20));
			shuffleButton.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.layout.layoutNodePosRandomize();
				}
			});
		}
		return shuffleButton;
	}
	private SimButton getInflateButton() {
		if (inflateButton == null) {
			inflateButton = new SimButton();
			inflateButton.setPreferredSize(new Dimension(60,20));
			inflateButton.setFont(new Font("Dialog",Font.PLAIN,10));
			inflateButton.setToolTipText("stretch the whole layout");
			inflateButton.setText("inflate");
			inflateButton.addMouseListener(new MouseAdapter() {
				public void mousePressed(java.awt.event.MouseEvent e) {
					app.setInflate(true);
				}
			});
		}
		return inflateButton;
	}
	private JLabel getDisplay() {
		if (display == null) {
			display = new JLabel();
			display.setText("display");
			display.setFont(new java.awt.Font("Dialog",1,11));
		}
		return display;
	}
	private JSlider getSizeSlider() {
		if (sizeSlider == null) {
			sizeSlider = new JSlider();
			sizeSlider.setMaximum(100);
			sizeSlider.setOpaque(false);
			sizeSlider.setToolTipText("set base node size");
			sizeSlider.setName("sizeSlider");
			sizeSlider.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setSize((float)sizeSlider.getValue());
				}
			});
		}
		return sizeSlider;
	}
	private JLabel getSizeLabel() {
		if (sizeLabel == null) {
			sizeLabel = new JLabel();
			sizeLabel.setText("nodeSize");
			sizeLabel.setFont(new java.awt.Font("Dialog",0,10));
		}
		return sizeLabel;
	}
	private JPanel getLayoutTab() {
		if (layoutTab == null) {
			layoutTab = new JPanel();
			GridBagLayout jPanel1Layout = new GridBagLayout();
			jPanel1Layout.columnWidths = new int[] {7, 7, 7};
			jPanel1Layout.rowHeights = new int[] {7, 7, 20, 7, 7, 7, 20, 20, 20, 7, 7, 20, 7, 7, 20, 20};
			jPanel1Layout.columnWeights = new double[] {0.1, 0.1, 0.1};
			jPanel1Layout.rowWeights = new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1};
			layoutTab.setLayout(jPanel1Layout);
			//			layoutTab.setBackground(new java.awt.Color(192,192,192));
			layoutTab.add(getValenzSlider(), new GridBagConstraints(0, 12, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getDistanceSlider(), new GridBagConstraints(0, 14, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getGroupRadius(), new GridBagConstraints(0, 6, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getPushSlider(), new GridBagConstraints(0, 9, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getRepellStSlider(), new GridBagConstraints(0, 10, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getStretchSlider(), new GridBagConstraints(0, 2, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getStrengthSlider(), new GridBagConstraints(0, 13, 2, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getValenzLabel(), new GridBagConstraints(2, 12, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getDistLabel(), new GridBagConstraints(2, 14, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getGroup(), new GridBagConstraints(2, 6, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getPushLabel(), new GridBagConstraints(2, 9, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getPushLabel1(), new GridBagConstraints(2, 10, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getPushLabel11(), new GridBagConstraints(2, 2, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getStrengthLabel(), new GridBagConstraints(2, 13, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getForces(), new GridBagConstraints(0, 0, 2, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getClusters(), new GridBagConstraints(0, 5, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getRadialBox(), new GridBagConstraints(1, 3, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getTreeBox(), new GridBagConstraints(2, 3, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getRepNeighbors(), new GridBagConstraints(1, 8, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getRepellBox1(), new GridBagConstraints(0, 8, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getJLabel3(), new GridBagConstraints(0, 4, 2, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getJLabel4(), new GridBagConstraints(0, 7, 2, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getJLabel5(), new GridBagConstraints(0, 11, 2, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
			layoutTab.add(getJCheckBox1x(), new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
		}
		return layoutTab;
	}
	private JSlider getValenzSlider() {
		if (valenzSlider == null) {
			valenzSlider = new JSlider();
			valenzSlider.setMaximum(100);
			valenzSlider.setOpaque(false);
			valenzSlider.setToolTipText("note distance: set valence influence");
			valenzSlider.setName("valenz");
			valenzSlider.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setVal((float)valenzSlider.getValue()/100f);
				}
			});
		}
		return valenzSlider;
	}
	private JSlider getDistanceSlider() {
		if (distanceSlider == null) {
			distanceSlider = new JSlider();
			distanceSlider.setMinimum(1);
			distanceSlider.setMaximum(1000);
			distanceSlider.setOpaque(false);
			distanceSlider.setToolTipText("set base node size");
			distanceSlider.setName("distance");
			distanceSlider.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setDistance((float)distanceSlider.getValue());
				}
			});
		}
		return distanceSlider;
	}
	private JSlider getGroupRadius() {
		if (groupRadius == null) {
			groupRadius = new JSlider();
			groupRadius.setMaximum(500);
			groupRadius.setMinimum(0);
			groupRadius.setOpaque(false);
			groupRadius.setToolTipText("set cluster radius");
			groupRadius.setName("group radius");
			groupRadius.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setClusterRad(groupRadius.getValue()/10f); //  Auto-generated Event stub stateChanged()
				}
			});
		}
		return groupRadius;
	}
	private JSlider getPushSlider() {
		if (pushSlider == null) {
			pushSlider = new JSlider();
			pushSlider.setMaximum(200);
			pushSlider.setMinimum(-50);
			pushSlider.setOpaque(false);
			pushSlider.setToolTipText("set repell distance factor");
			pushSlider.setName("repell");
			pushSlider.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setRepell((float)pushSlider.getValue());
				}
			});
		}
		return pushSlider;
	}
	private JSlider getRepellStSlider() {
		if (repellStSlider == null) {
			repellStSlider = new JSlider();
			repellStSlider.setMaximum(100);
			repellStSlider.setOpaque(false);
			repellStSlider.setValue((int)(app.getRepStr()*100));
			repellStSlider.setToolTipText("set repell strength factor");
			repellStSlider.setName("rep. st.");
			repellStSlider.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setRepStr((float)repellStSlider.getValue()/100f);
				}
			});
		}
		return repellStSlider;
	}
	private JSlider getStretchSlider() {
		if (stretchSlider == null) {
			stretchSlider = new JSlider();
			stretchSlider.setMaximum(100);
			stretchSlider.setMinimum(0);
			stretchSlider.setOpaque(false);
			stretchSlider.setToolTipText("set permanent inflate force (only use if graph is connected)");
			stretchSlider.setName("permInfl");
			stretchSlider.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setPermInflate(stretchSlider.getValue()); //  Auto-generated Event stub stateChanged()
				}
			});
		}
		return stretchSlider;
	}
	private JSlider getStrengthSlider() {
		if (strengthSlider == null) {
			strengthSlider = new JSlider();
			strengthSlider.setMinimum(1);
			strengthSlider.setMaximum(200);
			strengthSlider.setOpaque(false);
			strengthSlider.setToolTipText("set repell distance factor");
			strengthSlider.setName("repell");
			strengthSlider.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setStrength((float)strengthSlider.getValue()/100f);
				}
			});
		}
		return strengthSlider;
	}
	private JLabel getValenzLabel() {
		if (valenzLabel == null) {
			valenzLabel = new JLabel();
			valenzLabel.setText("degree f.");
			valenzLabel.setFont(new java.awt.Font("Dialog",0,10));
			valenzLabel.setPreferredSize(new Dimension(46,16));
		}
		return valenzLabel;
	}
	private JLabel getDistLabel() {
		if (distLabel == null) {
			distLabel = new JLabel();
			distLabel.setText("distance");
			distLabel.setFont(new java.awt.Font("Dialog",0,10));
		}
		return distLabel;
	}
	private JLabel getGroup() {
		if (group == null) {
			group = new JLabel();
			group.setText("radius");
			group.setFont(new java.awt.Font("Dialog",0,10));
		}
		return group;
	}
	private JLabel getPushLabel() {
		if (pushLabel == null) {
			pushLabel = new JLabel();
			pushLabel.setText("distance");
			pushLabel.setFont(new java.awt.Font("Dialog",0,10));
		}
		return pushLabel;
	}
	private JLabel getPushLabel1() {
		if (pushLabel1 == null) {
			pushLabel1 = new JLabel();
			pushLabel1.setText("strength");
			pushLabel1.setFont(new java.awt.Font("Dialog",0,10));
		}
		return pushLabel1;
	}
	private JLabel getPushLabel11() {
		if (pushLabel11 == null) {
			pushLabel11 = new JLabel();
			pushLabel11.setText("inflate");
			pushLabel11.setFont(new java.awt.Font("Dialog",0,10));
		}
		return pushLabel11;
	}
	private JLabel getStrengthLabel() {
		if (strengthLabel == null) {
			strengthLabel = new JLabel();
			strengthLabel.setText("strength");
			strengthLabel.setFont(new java.awt.Font("Dialog",0,10));
		}
		return strengthLabel;
	}
	private JLabel getForces() {
		if (forces == null) {
			forces = new JLabel();
			forces.setText("global layout");
			forces.setFont(new java.awt.Font("Dialog",1,11));
		}
		return forces;
	}
	private JCheckBox getClusters() {
		if (clusters == null) {
			clusters = new JCheckBox();
			clusters.setText("on");
			clusters.setSelected(app.isCluster());
			clusters.setMargin(new java.awt.Insets(0,0,0,0));
			clusters.setContentAreaFilled(false);
			clusters.setFont(new java.awt.Font("Dialog",0,10));
			clusters.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.setCluster(clusters.isSelected());
					app.net.updateNet();
				}
			});
		}
		return clusters;
	}
	private JCheckBox getRadialBox() {
		if (timeBox == null) {
			timeBox = new JCheckBox();
			timeBox.setText("timeline");
			timeBox.setSelected(app.isTime());
			timeBox.setMargin(new java.awt.Insets(0,0,0,0));
			timeBox.setContentAreaFilled(false);
			timeBox.setFont(new java.awt.Font("Dialog",0,10));
			timeBox.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.setTime(timeBox.isSelected());
				}
			});
		}
		return timeBox;
	}
	private JCheckBox getTreeBox() {
		if (treeBox == null) {
			treeBox = new JCheckBox();
			treeBox.setText("radial");
			treeBox.setSelected(app.isTree());
			treeBox.setMargin(new java.awt.Insets(0,0,0,0));
			treeBox.setContentAreaFilled(false);
			treeBox.setFont(new java.awt.Font("Dialog",0,10));
			treeBox.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.setTree(treeBox.isSelected());
				}
			});
		}
		return treeBox;
	}
	private JCheckBox getRepNeighbors() {
		if (repNeighbors == null) {
			repNeighbors = new JCheckBox();
			repNeighbors.setText("local on");
			repNeighbors.setSelected(app.isRepN());
			repNeighbors.setMargin(new java.awt.Insets(0,0,0,0));
			repNeighbors.setContentAreaFilled(false);
			repNeighbors.setFont(new java.awt.Font("Dialog",0,10));
			repNeighbors.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.setRepN(!app.isRepN());
					repNeighbors.setSelected(app.isRepN());
				}
			});
		}
		return repNeighbors;
	}
	private JCheckBox getRepellBox1() {
		if (repellBox1 == null) {
			repellBox1 = new JCheckBox();
			repellBox1.setText("on");
			repellBox1.setMargin(new java.awt.Insets(0,0,0,0));
			repellBox1.setContentAreaFilled(false);
			repellBox1.setFont(new java.awt.Font("Dialog",0,10));
			repellBox1.setSelected(app.repell);
			repellBox1.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.repell=!app.repell;
					repellBox1.setSelected(app.repell);
				}
			});
		}
		return repellBox1;
	}
	private JLabel getJLabel3() {
		if (jLabel3 == null) {
			jLabel3 = new JLabel();
			jLabel3.setText("clusters");
			jLabel3.setFont(new java.awt.Font("Dialog",1,11));
		}
		return jLabel3;
	}
	private JLabel getJLabel4() {
		if (jLabel4 == null) {
			jLabel4 = new JLabel();
			jLabel4.setText("repulsive forces (slow)");
			jLabel4.setFont(new java.awt.Font("Dialog",1,11));
		}
		return jLabel4;
	}
	private JLabel getJLabel5() {
		if (jLabel5 == null) {
			jLabel5 = new JLabel();
			jLabel5.setText("attractive forces");
			jLabel5.setFont(new java.awt.Font("Dialog",1,11));
		}
		return jLabel5;
	}
	private JPanel getDummyPanel() {
		if (dummyPanel == null) {
			dummyPanel = new JPanel();
			dummyPanel.setLayout(null);
			dummyPanel.setPreferredSize(new java.awt.Dimension(600,10));
			dummyPanel.add(getJLabel6());
		}
		return dummyPanel;
	}
	private JLabel getJLabel6() {
		if (jLabel6 == null) {
			jLabel6 = new JLabel();
			jLabel6.setText("openGL error!");
			jLabel6.setLayout(null);
			jLabel6.setFont(new java.awt.Font("Dialog",0,36));
			jLabel6.setBounds(33, 28, 224, 47);
		}
		return jLabel6;
	}
	private JMenu getFileMenu() {
		if (fileMenu == null) {
			fileMenu = new JMenu();
			fileMenu.setText("File");
			fileMenu.add(getOpenPicMenuItem());
			fileMenu.add(getOpenMenuItem());
			fileMenu.add(getOpenNodeMenuItem());
			fileMenu.add(getSaveMenuItem());
			fileMenu.add(getExitMenuItem());
		}
		return fileMenu;
	}
	private JMenuItem getOpenPicMenuItem() {
		if (openPicMenuItem == null) {
			openPicMenuItem = new JMenuItem();
			openPicMenuItem.setText("Set Image Folder");
			openPicMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I,Event.CTRL_MASK,true));
			openPicMenuItem.addActionListener(new ActionListener() {

				public void actionPerformed(ActionEvent e) {
					setImageDir();
				}
			});
		}
		return openPicMenuItem;
	}


	private JMenuItem getOpenMenuItem() {
		if (openMenuItem == null) {
			openMenuItem = new JMenuItem();
			openMenuItem.setText("Load Network");
			openMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,Event.CTRL_MASK,true));
			openMenuItem.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					loadNetwork();
				}
			});
		}
		return openMenuItem;
	}

	private void loadNetwork() {
		boolean t = app.render;
		app.render=false;
		int returnVal = openFile.showOpenDialog(openFile);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File filename =openFile.getSelectedFile();
			app.edgeListLoad(filename);
//			app.setFilename(filename);
			//			app.netLoad();
			setCounter();
			app.render=t;
		}
	}

	private JMenuItem getOpenNodeMenuItem() {
		if (openNodeMenuItem == null) {
			openNodeMenuItem = new JMenuItem();
			openNodeMenuItem.setText("Load Node Properties file");
			openNodeMenuItem.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					loadNodeAttributes();
				}

			});
		}
		return openNodeMenuItem;
	}

	private void loadNodeAttributes() {
		boolean t = app.render;
		app.render=false;
		int returnVal = openFile.showOpenDialog(openFile);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			String filename = openFile.getSelectedFile().getAbsoluteFile().toString();
			app.nodeListLoad(openFile.getSelectedFile());
			app.setNodefile(filename);
			setCounter();
			app.render=t;
		}
	}
	private JMenuItem getSaveMenuItem() {
		if (saveMenuItem == null) {
			saveMenuItem = new JMenuItem();
			saveMenuItem.setText("Save Network");
			saveMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,Event.CTRL_MASK,true));
			saveMenuItem.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					saveNetwork();
				}
			});
		}
		return saveMenuItem;
	}
	private JMenuItem getExitMenuItem() {
		if (exitMenuItem == null) {
			exitMenuItem = new JMenuItem();
			exitMenuItem.setText("Exit");
			exitMenuItem.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					System.exit(0);
				}
			});
		}
		return exitMenuItem;
	}

	public void redrawUI(){
		this.getMainWindow().paintAll(this.getMainWindow().getGraphics());
	}

	public void updateUI(NetStack n) {
		initNetList(n);
		initNodeList(n.global);
		initEdgeList(n.global);
		initAttList();
		setCounter();
		initSliders();
		initCheckboxes();
	}

	private void initAttList() {
		nodeAttModel.clear();
		nodeAttModel.addElement("none");
		for (String s : app.nets.global.nodeattributes) {
			nodeAttModel.addElement(s);
		}
		edgeAttModel.clear();
		edgeAttModel.addElement("none");
		for (String s : app.nets.global.edgeattributes) {
			edgeAttModel.addElement(s);
		}

		String att = app.getAttribute();
		if (att!=null) {
			edgeAttList.setSelectedValue(app.getAttribute(), true);
			nodeAttList.setSelectedValue(app.getAttribute(), true);
		}
		else {
			edgeAttList.setSelectedValue(0, true);
			nodeAttList.setSelectedValue(0, true);
		}
	}

	private void initEdgeList(Net globalNet) {
		HashMap<String,Edge> edgeList = globalNet.eTable;
		while (eTableModel.getRowCount()>0)   eTableModel.removeRow(0);

		for (Edge tmp:edgeList.values()) {
			String[] newRow = { tmp.getA().name, tmp.getB().name };
			eTableModel.addRow(newRow);
		}
	}

	private void initNodeList(Net n) {
		nodeListModel.clear();
		TreeSet<String> sorted = new TreeSet<String>();
		for (Node tmp:n.nNodes) sorted.add(tmp.name);
		for (String tmp : sorted) {
			nodeListModel.addElement(tmp);
		}
	}

	private void initNetList(NetStack n) {
		netListModel.clear();
		TreeSet<String> sorted = new TreeSet<String>();
		for (String tmp:n.getStack()) sorted.add(tmp);
		for (String tmp : sorted) {
			netListModel.addElement(tmp);
		}
	}
	private void initCheckboxes() {
		repellBox1.setSelected(app.repell);
		repNeighbors.setSelected(app.isRepN());
		treeBox.setSelected(app.isTree());
		timeBox.setSelected(app.isTree());
		clusters.setSelected(app.isCluster());
		noRender.setSelected(app.render);
		drawedges.setSelected(app.edges);
		draw3d.setSelected(!app.get3D());
		fadenodes.setSelected(app.fadeNodes);
		forceBox.setSelected(app.getCalc());
		renderTextures.setSelected(app.textures);
		directedGraph.setSelected(app.directed);
		drawclusters.setSelected(app.drawClusters);
	}
	private JSlider getJSlider1() {
		if(jSlider1 == null) {
			jSlider1 = new JSlider();
			jSlider1.setValue((int)(app.getPickdepth()));
			jSlider1.setMaximum(6);
			jSlider1.setInverted(false);
			jSlider1.setMajorTickSpacing(1);
			jSlider1.setSnapToTicks(true);
			jSlider1.setPaintTicks(false);
			jSlider1.setPaintTrack(false);
			jSlider1.setPaintLabels(true);
			jSlider1.setFont(new java.awt.Font("Dialog",0,7));
			jSlider1.setToolTipText("searchdepth");
			jSlider1.setOpaque(false);
			jSlider1.setName("jSlider1");
			jSlider1.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setPickdepth(jSlider1.getValue());
					app.updatePick();
				}
			});
		}
		return jSlider1;
	}

	private JLabel getJLabel7() {
		if(jLabel7 == null) {
			jLabel7 = new JLabel();
			jLabel7.setText("pick steps");
			jLabel7.setFont(new java.awt.Font("Dialog",0,10));
		}
		return jLabel7;
	}

	private SimButton getSimButton1() {
		if(simButton1 == null) {
			simButton1 = new SimButton();
			simButton1.setText("picked");
			simButton1.setVerticalAlignment(SwingConstants.CENTER);
			simButton1.setVerticalTextPosition(SwingConstants.CENTER);
			simButton1.setFont(new java.awt.Font("Dialog",0,10));
			simButton1.setPreferredSize(new Dimension(0,0));
			simButton1.setToolTipText("remove the picked node");
			simButton1.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.delSelected();
				}
			});
		}
		return simButton1;
	}

	private SimButton getSimButton2x() {
		if(simButton2 == null) {
			simButton2 = new SimButton();
			simButton2.setText("free all");
			simButton2.setVerticalAlignment(SwingConstants.CENTER);
			simButton2.setVerticalTextPosition(SwingConstants.CENTER);
			simButton2.setFont(new java.awt.Font("Dialog",0,10));
			simButton2.setPreferredSize(new Dimension(0,0));
			simButton2.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.locksRemove();
				}
			});
		}
		return simButton2;
	}

	private SimButton getSimButton3() {
		if(simButton3 == null) {
			simButton3 = new SimButton();
			simButton3.setText("lock all");
			simButton3.setVerticalAlignment(SwingConstants.CENTER);
			simButton3.setVerticalTextPosition(SwingConstants.CENTER);
			simButton3.setFont(new java.awt.Font("Dialog",0,10));
			simButton3.setPreferredSize(new Dimension(0,0));
			simButton3.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.lockAll();
				}
			});
		}
		return simButton3;
	}

	private JLabel getJLabel8() {
		if(jLabel8 == null) {
			jLabel8 = new JLabel();
			jLabel8.setText("locks");
			jLabel8.setFont(new java.awt.Font("Dialog",1,11));
		}
		return jLabel8;
	}

	private JSlider getPicSizeSlider() {
		if(picSizeSlider == null) {
			picSizeSlider = new JSlider();
			picSizeSlider.setMinimum(1);
			picSizeSlider.setMaximum(10);
			picSizeSlider.setToolTipText("set pic size as multiplier of node size");
			picSizeSlider.setOpaque(false);
			picSizeSlider.setName("jSlider2");
			picSizeSlider.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setPicSize(picSizeSlider.getValue());
				}
			});
		}
		return picSizeSlider;
	}

	private JLabel getJLabel9() {
		if(jLabel9 == null) {
			jLabel9 = new JLabel();
			jLabel9.setText("picSize");
			jLabel9.setFont(new java.awt.Font("Dialog",0,10));
		}
		return jLabel9;
	}

	private JSlider getJSlider2() {
		if(jSlider2 == null) {
			jSlider2 = new JSlider();
			jSlider2.setMaximum(100);
			jSlider2.setMinimum(0);
			jSlider2.setToolTipText("set pic size as multiplier of node size");
			jSlider2.setOpaque(false);
			jSlider2.setName("jSlider2");
			jSlider2.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setNodeVar(jSlider2.getValue()/10f);
				}
			});
		}
		return jSlider2;
	}

	private JLabel getJLabel10() {
		if(jLabel10 == null) {
			jLabel10 = new JLabel();
			jLabel10.setText("nodeVar");
			jLabel10.setFont(new java.awt.Font("Dialog",0,10));
		}
		return jLabel10;
	}

	private JSplitPane getJSplitPane2() {
		if(jSplitPane2 == null) {
			jSplitPane2 = new JSplitPane();
			jSplitPane2.setOrientation(JSplitPane.VERTICAL_SPLIT);
			jSplitPane2.setDividerSize(0);
			jSplitPane2.add(getControlPanel(), JSplitPane.TOP);
			jSplitPane2.add(getJPanel1(), JSplitPane.BOTTOM);
		}
		return jSplitPane2;
	}

	private JPanel getJPanel1() {
		if(midPanels == null) {
			midPanels = new JPanel();
			GridBagLayout jPanel1Layout = new GridBagLayout();
			jPanel1Layout.rowWeights = new double[] {0.1, 0.1};
			jPanel1Layout.rowHeights = new int[] {7, 7};
			jPanel1Layout.columnWeights = new double[] {0.1, 0.1};
			jPanel1Layout.columnWidths = new int[] {7, 7};
			midPanels.setLayout(jPanel1Layout);
			midPanels.add(getFadeNodes(), new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			midPanels.add(getFontslider(), new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.SOUTH, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
			midPanels.add(getJLabel1(), new GridBagConstraints(1, 1, 1, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
			midPanels.add(getForceBox(), new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
		}
		return midPanels;
	}
	private JCheckBox getFadeNodes() {
		if (fadenodes == null) {
			fadenodes = new JCheckBox();
			fadenodes.setText("fade nodes");
			fadenodes.setMargin(new java.awt.Insets(0,0,0,0));
			fadenodes.setContentAreaFilled(false);
			fadenodes.setFont(new java.awt.Font("Dialog",0,10));
			fadenodes.setSelected(app.fadeNodes);
			fadenodes.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.fadeNodes=fadenodes.isSelected();
					app.net.app.layout.applyPickColors();
				}
			});
		}
		return fadenodes;
	}
	private JSlider getFontslider() {
		if (fontslider == null) {
			fontslider = new JSlider();
			fontslider.setFont(new Font("Dialog",Font.PLAIN,10));
			fontslider.setMaximum(3);
			fontslider.setMajorTickSpacing(1);
			fontslider.setSnapToTicks(true);
			fontslider.setToolTipText("font");
			fontslider.setName("fontslider");
			fontslider.setMinimum(1);
			fontslider.setPaintTrack(false);
			fontslider.setPaintTicks(true);
			fontslider.setValue(app.getFonttype());
			fontslider.setPreferredSize(new java.awt.Dimension(20,40));
			fontslider.setInverted(true);
			fontslider.setValue(1);
			fontslider.setOpaque(false);
			fontslider.addChangeListener(new ChangeListener() {
				public void stateChanged(ChangeEvent e) {
					app.setFonttype(fontslider.getValue());
				}
			});
		}
		return fontslider;
	}
	private JLabel getJLabel1() {
		if (jLabel1 == null) {
			jLabel1 = new JLabel();
			jLabel1.setText("labeltype");
			jLabel1.setFont(new java.awt.Font("Dialog",0,10));
		}
		return jLabel1;
	}
	private JCheckBox getForceBox() {
		if (forceBox == null) {
			forceBox = new JCheckBox();
			forceBox.setText("layout on/off");
			forceBox.setToolTipText("Force driven Layout active");
			forceBox.setSelected(app.getCalc());
			forceBox.setMargin(new java.awt.Insets(0,0,0,0));
			forceBox.setContentAreaFilled(false);
			forceBox.setFont(new java.awt.Font("Dialog",0,10));
			forceBox.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.setCalc(!app.getCalc());
					forceBox.setSelected(app.getCalc());
				}
			});
		}
		return forceBox;
	}

	private SimButton getSimButton4() {
		if(simButton4 == null) {
			simButton4 = new SimButton();
			simButton4.setText("reset");
			simButton4.setFont(new Font("Dialog",Font.PLAIN,10));
			simButton4.setToolTipText("set the camera to 0,0");
			simButton4.setPreferredSize(new Dimension(60,20));
			simButton4.addMouseListener(new MouseAdapter() {
				public void mousePressed(MouseEvent e) {
					app.resetCam();
				}
			});
		}
		return simButton4;
	}

	private SimButton getSimButton5() {
		if(simButton5 == null) {
			simButton5 = new SimButton();
			simButton5.setText("focus picked");
			simButton5.setFont(new Font("Dialog",Font.PLAIN,10));
			simButton5.setToolTipText("set the camera to selected node");
			simButton5.setPreferredSize(new Dimension(60,20));
			simButton5.addMouseListener(new MouseAdapter() {
				public void mousePressed(MouseEvent e) {
					app.camOnSelected();
				}
			});
		}
		return simButton5;
	}

	private JLabel getJLabel11() {
		if(jLabel11 == null) {
			jLabel11 = new JLabel();
			jLabel11.setText("viewpoint");
			jLabel11.setFont(new java.awt.Font("Dialog",1,11));
		}
		return jLabel11;
	}

	private JCheckBox getJCheckBox2() {
		if(add == null) {
			add = new JCheckBox();
			add.setText("add");
			add.setSelected(false);
			add.setMargin(new java.awt.Insets(0,0,0,0));
			add.setContentAreaFilled(false);
			add.setFont(new java.awt.Font("Dialog",0,10));
		}
		return add;
	}

	private SimButton getBoxLayout() {
		if(boxButton == null) {
			boxButton = new SimButton();
			boxButton.setText("box");
			boxButton.setFont(new Font("Dialog",Font.PLAIN,10));
			boxButton.setToolTipText("arrange nodes in boxshape");
			boxButton.setPreferredSize(new Dimension(60,20));
			boxButton.addMouseListener(new MouseAdapter() {
				public void mousePressed(MouseEvent e) {
					app.layoutBox();
				}
			});
		}
		return boxButton;
	}

	private SimButton getCircle() {
		if(simButton6 == null) {
			simButton6 = new SimButton();
			simButton6.setText("circle");
			simButton6.setFont(new Font("Dialog",Font.PLAIN,10));
			simButton6.setToolTipText("arrange nodes in circular shape");
			simButton6.setPreferredSize(new Dimension(60,20));
			simButton6.addMouseListener(new MouseAdapter() {
				public void mousePressed(MouseEvent e) {
					app.layoutCircle();
				}
			});
		}
		return simButton6;
	}

	private SimButton getSimButton7() {
		if(simButton7 == null) {
			simButton7 = new SimButton();
			simButton7.setText("all");
			simButton7.setVerticalAlignment(SwingConstants.CENTER);
			simButton7.setVerticalTextPosition(SwingConstants.CENTER);
			simButton7.setFont(new java.awt.Font("Dialog",0,10));
			simButton7.setPreferredSize(new Dimension(0,0));
			simButton7.setToolTipText("remove all nodes from view");
			simButton7.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.delAll();
				}
			});
		}
		return simButton7;
	}

	private SimButton getSimButton8() {
		if(simButton8 == null) {
			simButton8 = new SimButton();
			simButton8.setText("pickregion");
			simButton8.setVerticalAlignment(SwingConstants.CENTER);
			simButton8.setVerticalTextPosition(SwingConstants.CENTER);
			simButton8.setFont(new java.awt.Font("Dialog",0,10));
			simButton8.setPreferredSize(new Dimension(0,0));
			simButton8.setToolTipText("remove nodes within pickrange");
			simButton8.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.delRegion(false);
				}
			});
		}
		return simButton8;
	}

	private JCheckBox getJCheckBox2x() {
		if(renderTextures == null) {
			renderTextures = new JCheckBox();
			renderTextures.setText("textures");
			renderTextures.setMargin(new java.awt.Insets(0,0,0,0));
			renderTextures.setContentAreaFilled(false);
			renderTextures.setSelected(app.textures);
			renderTextures.setFont(new java.awt.Font("Dialog",0,10));
			renderTextures.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.textures=renderTextures.isSelected();
				}
			});
		}
		return renderTextures;
	}

	private SimButton getSimButton9() {
		if(simButton9 == null) {
			simButton9 = new SimButton();
			simButton9.setText("inv.region");
			simButton9.setVerticalAlignment(SwingConstants.CENTER);
			simButton9.setVerticalTextPosition(SwingConstants.CENTER);
			simButton9.setFont(new java.awt.Font("Dialog",0,10));
			simButton9.setToolTipText("remove the nodes outside the pickregion");
			simButton9.setPreferredSize(new Dimension(0,0));
			simButton9.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.delRegion(true);
				}
			});
		}
		return simButton9;
	}

	private JCheckBox getJCheckBox1x() {
		if(jCheckBox1 == null) {
			jCheckBox1 = new JCheckBox();
			jCheckBox1.setText("circular");
			jCheckBox1.setMargin(new java.awt.Insets(0,0,0,0));
			jCheckBox1.setContentAreaFilled(false);
			jCheckBox1.setFont(new java.awt.Font("Dialog",0,10));
			jCheckBox1.setVisible(false);
			jCheckBox1.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.setTree(treeBox.isSelected());
				}
			});
		}
		return jCheckBox1;
	}

	private SimButton getSimButton10() {
		if(simButton10 == null) {
			simButton10 = new SimButton();
			simButton10.setText("force");
			simButton10.setFont(new Font("Dialog",Font.PLAIN,10));
			simButton10.setToolTipText("arrange nodes with force based algorithm");
			simButton10.setPreferredSize(new Dimension(60,20));
			simButton10.addMouseListener(new MouseAdapter() {
				public void mousePressed(MouseEvent e) {
					app.layoutForce();
				}
			});
		}
		return simButton10;
	}

	private JPanel getFile() {
		if(file == null) {
			file = new JPanel();
			FlowLayout fileLayout = new FlowLayout();
			file.setLayout(fileLayout);
			file.add(getLoadNet());
			file.add(getLoadNodeAtt());
			file.add(getSetImgDir());
			file.add(getSaveNet());
			file.add(getClear());
		}
		return file;
	}

	private JButton getLoadNet() {
		if(loadNet == null) {
			loadNet = new SimButton();
			loadNet.setText("add net");
			loadNet.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					loadNetwork();
				}
			});
		}
		return loadNet;
	}

	private SimButton getLoadNodeAtt() {
		if(loadNodeAtt == null) {
			loadNodeAtt = new SimButton();
			loadNodeAtt.setText("add attrib");
			loadNodeAtt.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					loadNodeAttributes();
				}
			});
		}
		return loadNodeAtt;
	}

	private void setImageDir() {
		boolean t = app.render;
		app.render=false;
		int returnVal = openPicDir.showOpenDialog(openPicDir);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			app.setTexFolder(openPicDir.getSelectedFile().getAbsolutePath()+"/");
			app.fileIO.loadTextures(app.texfolder, app.net);
		}
		app.render=t;
	}

	private SimButton getSetImgDir() {
		if(imgDir == null) {
			imgDir = new SimButton();
			imgDir.setText("img dir");
			imgDir.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					setImageDir();
				}
			});
		}
		return imgDir;
	}

	private void saveNetwork() {
		boolean t = app.render;
		app.render=false;
		int returnVal = saveFile.showSaveDialog(saveFile);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			app.net.saveNet(saveFile.getSelectedFile().toString());
			app.net.saveNodeData(saveFile.getSelectedFile().toString()+".n"); 
			app.net.saveEdgeData(saveFile.getSelectedFile().toString()+".e");
		}
		app.render=t;
	}

	private SimButton getSaveNet() {
		if(saveNet == null) {
			saveNet = new SimButton();
			saveNet.setText("save net");
			saveNet.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent evt) {
					saveNetwork();
				}
			});
		}
		return saveNet;
	}
	private SimButton getClear() {
		if (clear == null) {
			clear = new SimButton();
			clear.setText("delete all");
			clear.addActionListener(new ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					app.clearNets();
					updateUI(app.nets);
				}
			});
		}
		return clear;
	}

	private JScrollPane getNets() {
		if(nets == null) {
			nets = new JScrollPane();
			nets.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
			nets.setViewportView(getNetList());
		}
		return nets;
	}
	
	private JLabel getJLabel12() {
		if(jLabel12 == null) {
			jLabel12 = new JLabel();
			jLabel12.setText("elements");
			jLabel12.setFont(new java.awt.Font("Dialog",1,11));
		}
		return jLabel12;
	}
	
	private JCheckBox getDrawClusters() {
		if(drawclusters == null) {
			drawclusters = new JCheckBox();
			drawclusters.setText("clusters");
			drawclusters.setMargin(new java.awt.Insets(0,0,0,0));
			drawclusters.setContentAreaFilled(false);
			drawclusters.setFont(new java.awt.Font("Dialog",0,10));
			drawclusters.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					app.drawClusters=drawclusters.isSelected();
				}
			});
		}
		return drawclusters;
	}
}	
